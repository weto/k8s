# kubectl create -f app1.yaml
deployment.extensions/app2 created

# kubectl create -f app2.yaml
deployment.extensions/app2 created

# kubectl create -f svc-app1.yaml
deployment.extensions/svc-app1 created


# kubectl create -f svc-app2.yaml
deployment.extensions/svc-app2 created



#kubectl get deploy

# kubectl get services

# kubectl get ep

# vim default-backend.yaml

# kubectl create namespace ingress

# kubectl create -f default-backend.yaml -n ingress







# kubectl create -f default-backend-service.yaml -n ingress

# kubectl get deployments.

# kubectl get deployments. -n ingress

# kubectl get service

# kubectl get service -n ingress

# kubectl get ep -n ingress







# kubectl create -f nginx-ingress-controller-config-map.yaml -n ingress

# kubectl describe configmaps nginx-ingress-controller-conf -n ingress

# kubectl get configmaps -n ingress






# kubectl create -f nginx-ingress-controller-roles.yaml -n ingress

# kubectl get serviceaccounts

# kubectl get clusterrole -n ingress

# kubectl get clusterrolebindings -n ingress





# kubectl create -f nginx-ingress-controller-deployment.yaml -n ingress

# kubectl get deployments -n ingress

# kubectl get pods --all-namespaces





# kubectl create -f nginx-ingress.yaml -n ingress

# kubectl create -f app-ingress.yaml

# kubectl get ingresses

# kubectl get ingresses -n ingress

# kubectl describe ingresses.extensions nginx-ingress -n ingress

# kubectl describe ingresses.extensions app-ingress

# vim nginx-ingress-controller-service.yaml

# kubectl create -f nginx-ingress-controller-service.yaml -n=ingress





Pronto, agora você já pode acessar suas apps pela URL que você configurou. Abra o navegador e adicione os seguintes endereços:

http://SEU-ENDEREÇO:30000/app1

http://SEU-ENDEREÇO:30000/app2

http://SEU-ENDEREÇO:32000/nginx_status

Ou ainda via curl:

# curl http://SEU-ENDEREÇO:30000/app1


# curl http://SEU-ENDEREÇO:30000/app2


# curl http://SEU-ENDEREÇO:32000/nginx_status